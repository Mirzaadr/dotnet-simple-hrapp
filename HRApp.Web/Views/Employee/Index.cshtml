@model IEnumerable<EmployeeDTO>
@{
    int currentPage = ViewBag.CurrentPage;
    int totalPages = ViewBag.TotalPages;
    string search = ViewBag.Search;
    ViewData["Title"] = "Employee List";
}
<h2>Employee List</h2>

<div class="d-flex justify-content-between align-items-center mb-3">
    <!-- Left: Add Button -->
    <div>
        <a href="/Employee/Create" class="btn btn-primary mb-2">Add Employee</a>
    </div>

    <!-- Right: Search Form -->
    <form asp-action="Index" method="get" class="d-flex" role="search">
        <div class="input-group">
            <input name="search" class="form-control" type="search" placeholder="Search..." value="@ViewBag.Search" />

            @if (!string.IsNullOrEmpty(ViewBag.Search as string))
            {
                <a href="@Url.Action("Index")" class="btn btn-outline-secondary">
                    <i class="bi bi-x-lg"></i>
                </a>
            }

            <button class="btn btn-outline-secondary" type="submit">
                <i class="bi bi-search"></i>
            </button>
        </div>
    </form>
</div>


<div id="employeeTable">
    <partial name="_EmployeeTable" model="@Model"/>
</div>

@await Component.InvokeAsync("Pagination", new PaginationViewModel {
    CurrentPage = currentPage,
    TotalPages = totalPages,
    SearchTerm = search
})


